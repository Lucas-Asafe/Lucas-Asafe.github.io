{"componentChunkName":"component---src-templates-blog-post-js","path":"/boas-práticas-de-programação-em-delphi/","result":{"data":{"markdownRemark":{"fields":{"slug":"/boas-práticas-de-programação-em-delphi/"},"frontmatter":{"title":"Boas Práticas de Programação em Delphi","description":"\"Qualquer tolo consegue escrever um código que o computador entenda, bons programadores escrevem código que humanos entendam\" - Martin Fowler","date":"12 de Março de 2020","image":null},"html":"<p>Compilei aqui algumas boas práticas que acredito tem benefícios para comunidade em geral, e você irá notar que apesar do título muitas das dicas contidas aqui não se aplicam só a programadores Delphi e são de modo geral coisas simples que antes de conhecermos ou mesmo conhecendo deixamos passar desapercebido na hora da codificação.</p>\n<h3><strong>Motivações</strong></h3>\n<p>Para estimular a colaboração, aí vão duas frases fantásticas que me fazem pensar melhor antes de escrever qualquer coisa...</p>\n<blockquote>\n<p>\"Qualquer tolo consegue escrever um código que o computador entenda, bons programadores escrevem código que humanos entendam\" - Martin Fowler</p>\n<p>\"Sempre codifique como se o programador que vai dar manutenção no seu código fosse um serial killer maníaco que sabe onde você mora\" - Autor desconhecido</p>\n</blockquote>\n<h3><strong>Nomenclatura</strong></h3>\n<ul>\n<li>Renomeie todo os componente que você fará referência no código e ponha<strong>nomes significativos</strong>que transmitam uma ideia da função dele ali, isso facilita e muito a leitura e compreensão de um código que manipula componentes em tempo de execução.</li>\n<li>Se usar termos em inglês,<strong>mantenha o padrão</strong>em inglês, e se em português, mantenha também o padrão em português</li>\n<li>Nomear os arquivos ou componentes com seus respectivos tipos em<strong>forma mnemônica</strong>(Ex. \"frm\" para formulário, ou \"u\" para units, \"grd\" para grids)</li>\n<li>Compor o nome de tudo que esteja relacionado a uma entidade de domínio com o nome desta (Ex. Uma unit ou formulário que manipule os dados de um cliente ter no seu nome \"cliente\").</li>\n<li><strong>Criar contêineres lógicos usando ponto</strong>para que saiba que grupo pertence a classe/arquivo A/B (Ex. Cliente.A/Cliente.B, Dao.Produto).</li>\n</ul>\n<h3><strong>Organização da Estrutura de Diretório Delphi</strong></h3>\n<p><strong>Nunca trabalhar com caminho estático (fixo) de diretório</strong>, pois isso gera muitos problemas quando as coisas vão rodar em um computador com configuração de pastas diferente, por tanto<strong>sempre trabalhe com caminho relativo de diretório</strong>. (Ex.<em>\\</em>.**( O \"ponto barra\" indica o diretório corrente do projeto).</p>\n<p>Também é possível usar no caso do Delphi variáveis de ambiente como:</p>\n<ul>\n<li><strong>$(Config)</strong>- (É a pasta com o nome do Build que foi configurado (Ex. DEBUG ou RELEASE)).</li>\n<li><strong>$(Plataform)</strong>- (É a pasta com o nome da Plataforma que foi configurado (Ex. Android, Win32, iOS, ...)).</li>\n</ul>\n<h3><strong>Dicas de padrão de organização</strong></h3>\n<ul>\n<li>Colocar executáveis em uma pasta de nome \"Bin\".</li>\n<li>Criar pasta para DCUs em \".$(Plataform)$(Config)\".</li>\n<li>Usar padrão arquitetural como por exemplo:<strong>MVC</strong>ou<strong>MVVM</strong>.</li>\n<li>Criar pasta de nome \"Library\" (uma pasta de arquivos que é usada em mais de um projeto).</li>\n<li>Adicionar pasta \"Library\" no Source Path do projeto.</li>\n<li>Quando compilar para a distribuição compilar em Release</li>\n</ul>\n<h3>Pacotes (Packages): Refatorando executáveis</h3>\n<p>Desmarcar opção que compilar pacotes junto com executável<strong>*build with run packages*</strong>ou em<strong>*Runtime packages*</strong>na opção<strong>*Link with runtime packages*</strong>para<strong>*True**</strong>.* Ao invés disso<strong>enviar somente os pacotes que serão utilizados</strong>e para saber quais são esses basta olhar em<strong>*Information for [**</strong>nomeDoProjeto]<strong>* que fica na aba</strong>*Project*<em>**.</em></p>\n<p>Alguns dos pacotes estarão na pasta do Delphi e os componentes de terceiros nas pastas que ficam em documentos e os nativos dentro da pasta de instalação.</p>\n<p>O benefício disso é só precisar enviar os pacotes uma vez e como consequência acaba tendo como resultado<strong>executáveis muito menores</strong>.</p>\n<h3><strong>Testes unitários</strong></h3>\n<p>Teste unitário não é difícil, é trabalhoso, porém importante principalmente em projetos que muitas pessoas estão trabalhando juntas ele tem a finalidade de permitir que uma funcionalidade permaneça intacta mesmo que novas implementações ou correções na aplicação sejam feitas.</p>\n<p>Desde o Delphi 2007, há a possibilidade de adicionar um projeto de teste capturando do<strong>projeto real</strong>as classes e métodos que queremos testar (se localiza no pacote<em>Unit Test</em>e chama-se<em>Test Project</em>em seguida do mesmo pacote devem ser adicionados os casos de teste (<em>Test Case</em>).</p>\n<h3>Abusar dos mecanismos de ajuda</h3>\n<ul>\n<li>O compilador com suas dicas(Hint), avisos/alertas(Warnings) e erros(errors), são apresentados na aba de<em>messages</em>e tem sua<strong>leitura obrigatória</strong>.</li>\n<li><strong>Helps</strong>: É totalmente parametrizado, o que significa que o help pode ser aberto exatamente na propriedade do componente que você quiser basta pressionar F1 para tanto.</li>\n<li>Error insight<strong>erros que aparecem dentro do código.</strong></li>\n<li>Ler sempre o<strong>Whats new</strong>, para ficar por dentro das novidades.</li>\n<li><strong>Anotar</strong>o que é mais interessante e estudar por sessões.</li>\n</ul>\n<h3>Em conclusão boa prática é:</h3>\n<ul>\n<li>Se preocupar com os outros.</li>\n<li>Criar um padrão.</li>\n<li>Documentar o padrão criado.</li>\n<li>Seguir sempre o padrão criado.</li>\n</ul>","timeToRead":3}},"pageContext":{"slug":"/boas-práticas-de-programação-em-delphi/","previousPost":{"frontmatter":{"title":"Fluxo de trabalho no Scrum"},"fields":{"slug":"/fluxo-de-trabalho-scrum/"}},"nextPost":null}}}