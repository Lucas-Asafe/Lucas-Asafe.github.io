{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/components/ListWrapper/styled.js","webpack:///./src/templates/blog-list.js"],"names":["PostItemLink","styled","AniLink","PostItemWrapper","section","media","lessThan","PostItemTag","div","props","background","PostItemInfo","PostItemDate","time","PostItemTitle","h1","PostItemDescription","p","PostItem","slug","category","date","timeToRead","title","description","cover","direction","bg","getThemeColor","duration","to","PaginationWrapper","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","ListWrapper","query","BlogList","postList","data","allMarkdownRemark","edges","pageContext","Layout","map","node","frontmatter","fields"],"mappings":"mpBAIO,IAAMA,EAAeC,YAAOC,KAAV,2EAAGD,CAAH,2IAcZE,EAAkBF,IAAOG,QAAV,8EAAGH,CAAH,oMAcxBI,IAAMC,SAAS,QAAfD,CAdwB,MAqBfE,EAAcN,IAAOO,IAAV,0EAAGP,CAAH,gPAER,SAAAQ,GAAK,OAAIA,EAAMC,WAAaD,EAAMC,WAAa,qBAW3DL,IAAMC,SAAS,QAAfD,CAboB,MA2BXM,EAAeV,IAAOO,IAAV,2EAAGP,CAAH,8DAKrBI,IAAMC,SAAS,QAAfD,CALqB,MAUZO,EAAeX,IAAOY,KAAV,2EAAGZ,CAAH,uBAIZa,EAAgBb,IAAOc,GAAV,4EAAGd,CAAH,2GAWbe,EAAsBf,IAAOgB,EAAV,kFAAGhB,CAAH,uDCjDjBiB,IAnCE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAChBT,EADa,EACbA,WACAU,EAFa,EAEbA,SACAC,EAHa,EAGbA,KACAC,EAJa,EAIbA,WACAC,EALa,EAKbA,MACAC,EANa,EAMbA,YANa,OAQf,kBAAC,EAAD,CACEC,OAAK,EACLC,UAAU,QACVC,GAAIC,cACJC,SAAU,GACVC,GAAIX,GACJ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeT,WAAYA,GAAaU,GACxC,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAiBC,EAAjB,MAA0BC,EAA1B,mBACA,kBAAC,EAAD,KAAkBC,GAClB,kBAAC,EAAD,KAAwBC,Q,yTCvBzB,IAAMO,EAAoB9B,IAAOG,QAAV,4EAAGH,CAAH,mPAQ1BI,IAAMC,SAAS,QAAfD,CAR0B,MCyCf2B,EApCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,YACAC,EAJiB,EAIjBA,SACAC,EALiB,EAKjBA,SACAC,EANiB,EAMjBA,SANiB,OAQjB,kBAAC,EAAD,MACIL,GAAW,kBAAC,IAAD,CACbR,OAAK,EACLC,UAAU,OACVC,GAAIC,cACJC,SAAU,GACVC,GAAIO,GALS,qBAMb,2BACGF,EADH,OACoBC,IAElBF,GAAU,kBAAC,IAAD,CACZT,OAAK,EACLC,UAAU,QACVC,GAAIC,cACJC,SAAU,GACVC,GAAIQ,GALQ,sBCxBHC,EAActC,IAAOG,QAAV,sEAAGH,CAAH,6LCFxB,sCAUA,IA6CauC,EAAK,aA0BHC,UAvEE,SAAAhC,GACf,IAAMiC,EAAWjC,EAAMkC,KAAKC,kBAAkBC,MADtB,EAGUpC,EAAMqC,YAAhCX,EAHgB,EAGhBA,YAAaC,EAHG,EAGHA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EAAWF,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChEG,EAAQ,UAAYH,EAAc,GAExC,OACE,kBAACY,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKxB,MAAM,SACX,kBAAC,EAAD,KACGmB,EAASM,KAAI,oBACZC,KADY,IAEVC,YAAexC,EAFL,EAEKA,WAAYU,EAFjB,EAEiBA,SAAUC,EAF3B,EAE2BA,KAAME,EAFjC,EAEiCA,MAAOC,EAFxC,EAEwCA,YAClDF,EAHU,EAGVA,WACUH,EAJA,EAIVgC,OAAUhC,KAJA,OAOZ,kBAACD,EAAA,EAAD,CACEC,KAAMA,EACNT,WAAYA,EACZU,SAAUA,EACVC,KAAMA,EACNC,WAAYA,EACZC,MAAOA,EACPC,YAAaA,QAKrB,kBAAC,EAAD,CACMS,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-8cd71bd73be6670aeab1.js","sourcesContent":["import styled from 'styled-components'\nimport media from 'styled-media-query'\nimport AniLink from 'gatsby-plugin-transition-link/AniLink'\n\nexport const PostItemLink = styled(AniLink)`\n  color: var(--texts);\n  display: flex;\n  text-decoration: none;\n\n  body#grid & {\n    background-color: var(--background);\n  }\n\n  &:hover {\n    color: var(--highlight);\n  }\n`\n\nexport const PostItemWrapper = styled.section`\n  align-items: center;\n  border-bottom: 1px solid var(--borders);\n  display: flex;\n  padding: 2rem 3rem;\n  width: 100%;\n\n  body#grid & {\n    border: none;\n    padding: 2rem 1rem;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  ${media.lessThan(\"large\")`\n    align-items: flex-start;\n    flex-direction: column;\n    padding: 2rem 1rem;\n  `}\n`\n\nexport const PostItemTag = styled.div`\n  align-items: center;\n  background: ${props => props.background ? props.background : 'var(--highlight)'};\n  border-radius: 50%;\n  color: var(--white);\n  display: flex;\n  font-size: 1.3rem;\n  font-weight: 700;\n  justify-content: center;\n  min-height: 90px;\n  min-width: 90px;\n  text-transform: uppercase;\n\n  ${media.lessThan(\"large\")`\n    border-radius: 0;\n    font-size: 1rem;\n    min-height: auto;\n    min-width: auto;\n    padding: .2rem .5rem;\n    margin-bottom: .7rem;\n  `}\n\n  body#grid & {\n    margin-bottom: 1.5rem;\n  }\n`\n\nexport const PostItemInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 1.5rem;\n\n  ${media.lessThan(\"large\")`\n    margin: 0;\n  `}\n`\n\nexport const PostItemDate = styled.time`\n  font-size: 0.9rem;\n`\n\nexport const PostItemTitle = styled.h1`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin: 0.2rem 0 0.5rem;\n\n  body#grid & {\n    line-height: 1.1;\n    margin: 0.8rem 0;\n  }\n`\n\nexport const PostItemDescription = styled.p`\n  font-size: 1.2rem;\n  font-weight: 300;\n  line-height: 1.2;\n`","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport getThemeColor from '../../utils/getThemeColor'\n\nimport * as S from './styled'\n\nconst PostItem = ({ slug, \n    background, \n    category, \n    date, \n    timeToRead, \n    title, \n    description \n  }) => (\n  <S.PostItemLink\n    cover \n    direction='right' \n    bg={getThemeColor()} \n    duration={0.6} \n    to={slug}>\n    <S.PostItemWrapper>\n      <S.PostItemTag background={background}>{category}</S.PostItemTag>\n      <S.PostItemInfo>\n        <S.PostItemDate>{date} - {timeToRead} min de leitura</S.PostItemDate>\n        <S.PostItemTitle>{title}</S.PostItemTitle>\n        <S.PostItemDescription>{description}</S.PostItemDescription>\n      </S.PostItemInfo>\n    </S.PostItemWrapper>\n  </S.PostItemLink>\n)\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  category: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n}\n\nexport default PostItem","import styled from 'styled-components'\nimport media from 'styled-media-query'\n\nexport const PaginationWrapper = styled.section`\n  align-items: center;\n  border-top: 1px solid var(--borders);\n  color: var(--texts);\n  display: flex;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n\n  ${media.lessThan(\"large\")`\n    font-size: .8rem;\n    padding: 1rem;\n  `}\n\n  a {\n    color: var(--texts);\n    text-decoration: none;\n    transition: color 0.5s;\n\n    &:hover {\n      color: var(--highlight);\n    }\n  }\n`","import React from \"react\"\nimport propTypes from \"prop-types\"\nimport AniLink from 'gatsby-plugin-transition-link/AniLink'\n\nimport getThemeColor from '../../utils/getThemeColor'\n\nimport * as S from \"./styled\"\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => (\n  <S.PaginationWrapper>\n    {!isFirst && <AniLink \n    cover \n    direction='left' \n    bg={getThemeColor()} \n    duration={0.6} \n    to={prevPage}>← página anterior</AniLink>}\n    <p>\n      {currentPage} de {numPages}\n    </p>\n    {!isLast && <AniLink \n    cover \n    direction='right' \n    bg={getThemeColor()} \n    duration={0.6} \n    to={nextPage}>proxima página →</AniLink>}\n  </S.PaginationWrapper>\n)\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination","import styled from 'styled-components'\n\nexport const ListWrapper = styled.section`\n  body#grid & {\n    background-color: var(--borders);\n    border-bottom: 1px solid var(--borders);\n    display: grid;\n    grid-area: posts;\n    grid-gap: 1px;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\n  }\n`","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport PostItem from '../components/PostItem'\nimport Pagination from '../components/Pagination'\n\nimport * as S from '../components/ListWrapper/styled'\n\nconst BlogList = props => {\n  const postList = props.data.allMarkdownRemark.edges\n  \n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : `/page/${currentPage - 1}`\n  const nextPage = `/page/${currentPage + 1}`\n\n  return (\n    <Layout>\n      <SEO title='Home' />\n      <S.ListWrapper>\n        {postList.map(({\n          node: {\n            frontmatter: { background, category, date, title, description },\n            timeToRead,\n            fields: { slug }\n          }\n        }) => (\n          <PostItem\n            slug={slug}\n            background={background}\n            category={category}\n            date={date}\n            timeToRead={timeToRead}\n            title={title}\n            description={description}\n          />\n        )\n      )}\n    </S.ListWrapper>\n    <Pagination\n          isFirst={isFirst}\n          isLast={isLast}\n          currentPage={currentPage}\n          numPages={numPages}\n          prevPage={prevPage}\n          nextPage={nextPage}\n      />\n    </Layout>\n  )\n}\n\n\nexport const query = graphql`\nquery PostList($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            background\n            category\n            date(locale: \"pt-br\", formatString: \"DD [de] MMMM [de] YYYY\")\n            title\n            description\n          }\n          timeToRead\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default BlogList"],"sourceRoot":""}